/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,13],$V2=[1,14],$V3=[1,27],$V4=[1,19],$V5=[1,20],$V6=[1,21],$V7=[1,22],$V8=[1,26],$V9=[1,25],$Va=[1,23],$Vb=[1,24],$Vc=[1,29],$Vd=[1,30],$Ve=[1,31],$Vf=[1,32],$Vg=[1,33],$Vh=[5,17,18,19,24,27,31,32,39,41,42,43,44,51,52,53,54,55],$Vi=[5,17,18,19,24,25,27,31,32,39,41,42,43,44,51,52,53,54,55],$Vj=[1,57],$Vk=[1,52],$Vl=[1,43],$Vm=[1,44],$Vn=[1,45],$Vo=[1,46],$Vp=[1,47],$Vq=[1,48],$Vr=[1,49],$Vs=[1,50],$Vt=[1,51],$Vu=[1,54],$Vv=[46,48],$Vw=[2,43],$Vx=[1,66],$Vy=[1,77],$Vz=[1,82],$VA=[1,81],$VB=[1,83],$VC=[1,84],$VD=[1,85],$VE=[1,86],$VF=[1,87],$VG=[1,88],$VH=[1,89],$VI=[1,90],$VJ=[1,91],$VK=[1,92],$VL=[10,30,37,56,57,58,59,60,61,62,63,64,65,66,67],$VM=[10,30,37,48,56,57,58,59,60,61,62,63,64,65,66,67],$VN=[37,46],$VO=[2,55],$VP=[1,100],$VQ=[17,18,19,24,25,27,39,41,42,43,44,51,52,53,54,55],$VR=[1,115],$VS=[1,137],$VT=[2,27],$VU=[30,37],$VV=[10,30,37,56,57,60,61,62,63,64,65,66,67],$VW=[10,30,37,60,61,62,63,64,65,66,67],$VX=[10,30,37,64,65,66,67],$VY=[1,153],$VZ=[30,36,37];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"GlobalList":4,"EOF":5,"GlobalInstr":6,"Instruction":7,"FunctionSt":8,"StructSt":9,";":10,"Instructions":11,"IfSt":12,"PrintSt":13,"DoWhileSt":14,"WhileSt":15,"InstructionSt":16,"BREAK":17,"CONTINUE":18,"RETURN":19,"Expression":20,"Declaration":21,"Assignment":22,"Call":23,"LBRACE":24,"RBRACE":25,"Type":26,"ID":27,"(":28,"Params":29,")":30,"VOID":31,"DEFINE":32,"AS":33,"[":34,"ParamList":35,"]":36,",":37,"Param":38,"IF":39,"ELSE":40,"WHILE":41,"DO":42,"PRINT":43,"PRINTLN":44,"IdList":45,"=":46,"AssignmentId":47,".":48,"ParamsExpression":49,"ExpressionList":50,"INTEGER":51,"DOUBLE":52,"BOOLEAN":53,"CHAR":54,"STRING":55,"-":56,"+":57,"*":58,"/":59,"<":60,">":61,"<=":62,">=":63,"==":64,"!=":65,"&&":66,"||":67,"!":68,"LINTEGER":69,"LCHAR":70,"LDECIMAL":71,"TRUE":72,"FALSE":73,"LSTRING":74,"NULL":75,"Access":76,"STRC":77,"AccessId":78,"AccessFunc":79,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:";",17:"BREAK",18:"CONTINUE",19:"RETURN",24:"LBRACE",25:"RBRACE",27:"ID",28:"(",30:")",31:"VOID",32:"DEFINE",33:"AS",34:"[",36:"]",37:",",39:"IF",40:"ELSE",41:"WHILE",42:"DO",43:"PRINT",44:"PRINTLN",46:"=",48:".",51:"INTEGER",52:"DOUBLE",53:"BOOLEAN",54:"CHAR",55:"STRING",56:"-",57:"+",58:"*",59:"/",60:"<",61:">",62:"<=",63:">=",64:"==",65:"!=",66:"&&",67:"||",68:"!",69:"LINTEGER",70:"LCHAR",71:"LDECIMAL",72:"TRUE",73:"FALSE",74:"LSTRING",75:"NULL",77:"STRC"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,2],[11,2],[11,1],[7,1],[7,2],[7,2],[7,1],[7,1],[7,2],[7,2],[7,2],[7,3],[7,2],[7,2],[7,2],[16,3],[8,6],[8,6],[8,6],[9,6],[29,1],[29,0],[35,3],[35,1],[38,2],[38,2],[12,5],[12,7],[12,7],[15,5],[14,6],[13,4],[13,4],[21,4],[21,4],[22,3],[47,3],[47,1],[23,4],[49,1],[49,0],[50,3],[50,1],[26,1],[26,1],[26,1],[26,1],[26,1],[45,3],[45,1],[20,2],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,2],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,3],[20,1],[20,4],[76,1],[76,1],[78,3],[78,1],[79,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];
    
break;
case 2: case 7:

        this.$ = $$[$0-1]; 
        this.$.push($$[$0]);
    
break;
case 3: case 8:

        this.$ = [$$[$0]]; 
    
break;
case 4: case 5: case 9: case 12: case 13: case 26: case 78: case 80: case 81: case 84:

        this.$ = $$[$0];
    
break;
case 6: case 10: case 11: case 18: case 19:

        this.$ = $$[$0-1];
    
break;
case 14:

        this.$ = new Break(_$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 15:

        this.$ = new Continue(_$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 16:

        this.$ = new Return(null,_$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 17:

        this.$ = new Return($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 20:

        this.$ = new Call($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 21:

        this.$ = new InstrBody($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 22:

        this.$ = new FunctionSt($$[$0-5],$$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column);
    
break;
case 23:

        this.$ = new FunctionSt(new Type(Types.STRUCT,$$[$0-5]),$$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column);
    
break;
case 24:

        this.$ = new FunctionSt(new Type(Types.VOID,$$[$0-5]),$$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column);
    
break;
case 25:

        this.$ = new StructSt($$[$0-4],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column);
    
break;
case 27: case 46:

        this.$ = [];
    
break;
case 28: case 47: case 54:

        this.$ = $$[$0-2];
        this.$.push($$[$0]);
    
break;
case 29: case 48: case 55:

        this.$ = [$$[$0]];
    
break;
case 30:

        this.$ = new Param($$[$0],$$[$0-1]);
    
break;
case 31:

        this.$ = new Param($$[$0],new Type(Types.STRUCT,$$[$0-1]));
    
break;
case 32:

        this.$ = new If($$[$0-2], $$[$0], null, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 33: case 34:

        this.$ = new If($$[$0-4], $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 35:

        this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 36:
 
        this.$ = new DoWhile($$[$0-1], $$[$0-4], _$[$0-5].first_line, _$[$0-5].first_column); 
    
break;
case 37:

        this.$ = new Print($$[$0-1],false,_$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 38:

        this.$ = new Print($$[$0-1],true,_$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 39:

        this.$ = new Declaration($$[$0-3],$$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 40:

        this.$ = new Declaration(new Type(Types.STRUCT,$$[$0-3]),$$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 41:

        this.$ = new Assignment($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 42:

        this.$ = new AssignmentId($$[$0],$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 43:

        this.$ = new AssignmentId($$[$0],null,_$[$0].first_line,_$[$0].first_column);
    
break;
case 44:

        this.$ = new AssignmentFunc($$[$0-3],$$[$0-1],null,_$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 45:

        this.$ =  $$[$0];
    
break;
case 49:

        this.$ = new Type(Types.INTEGER);
    
break;
case 50:

        this.$ = new Type(Types.DOUBLE);
    
break;
case 51:

        this.$ = new Type(Types.BOOLEAN);
    
break;
case 52:

        this.$ = new Type(Types.CHAR);
    
break;
case 53:

        this.$ = new Type(Types.STRING);
    
break;
case 56:
 
        this.$ = null;
    
break;
case 57:
 
        this.$ = new Plus($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
    
break;
case 58:
 
        this.$ = new Minus($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
    
break;
case 59:
 
        this.$ = new Times($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
    
break;
case 60:
 
        this.$ = new Div($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
    
break;
case 61:
 
        this.$ = new Less(false,$$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
    
break;
case 62:
 
        this.$ = new Greater(false,$$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
    
break;
case 63:
 
        this.$ = new Less(true,$$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
    
break;
case 64:
 
        this.$ = new Greater(true,$$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
    
break;
case 65:
 
        this.$ = new Equals($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
    
break;
case 66:
 
        this.$ = new NotEquals($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
    
break;
case 67:
 
        this.$ = new And($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
    
break;
case 68:
 
        this.$ = new Or($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
    
break;
case 69:
 
        this.$ = new Not($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
    
break;
case 70:
 
        this.$ = new PrimitiveL(Types.INTEGER, $$[$0], _$[$0].first_line, _$[$0].first_column); 
    
break;
case 71:
 
        this.$ = new PrimitiveL(Types.CHAR, $$[$0].charCodeAt(0), _$[$0].first_line, _$[$0].first_column); 
    
break;
case 72:
 
        this.$ = new PrimitiveL(Types.DOUBLE, $$[$0], _$[$0].first_line, _$[$0].first_column); 
    
break;
case 73:
 
        this.$ = new PrimitiveL(Types.BOOLEAN, true, _$[$0].first_line, _$[$0].first_column); 
    
break;
case 74:
 
        this.$ = new PrimitiveL(Types.BOOLEAN, false, _$[$0].first_line, _$[$0].first_column); 
    
break;
case 75:
  
        this.$ = new StringL(Types.STRING,$$[$0],_$[$0].first_line,_$[$0].first_column);
    
break;
case 76:

        this.$ = new PrimitiveL(Types.NULL,'-1',_$[$0].first_line,_$[$0].first_column);
    
break;
case 77:
 
        this.$ = $$[$0-1]; 
    
break;
case 79:

        this.$ = new NewStruct($$[$0-2],_$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 82:

        this.$ = new AccessId($$[$0],$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 83:

        this.$ = new AccessId($$[$0],null,_$[$0].first_line,_$[$0].first_column);
    
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,12:7,13:8,14:9,15:10,16:11,17:$V0,18:$V1,19:$V2,21:15,22:16,23:17,24:$V3,26:18,27:$V4,31:$V5,32:$V6,39:$V7,41:$V8,42:$V9,43:$Va,44:$Vb,47:28,51:$Vc,52:$Vd,53:$Ve,54:$Vf,55:$Vg},{1:[3]},{5:[1,34],6:35,7:4,8:5,9:6,12:7,13:8,14:9,15:10,16:11,17:$V0,18:$V1,19:$V2,21:15,22:16,23:17,24:$V3,26:18,27:$V4,31:$V5,32:$V6,39:$V7,41:$V8,42:$V9,43:$Va,44:$Vb,47:28,51:$Vc,52:$Vd,53:$Ve,54:$Vf,55:$Vg},o($Vh,[2,3]),o($Vh,[2,4]),o($Vh,[2,5]),{10:[1,36]},o($Vi,[2,9]),{10:[1,37]},{10:[1,38]},o($Vi,[2,12]),o($Vi,[2,13]),{10:[1,39]},{10:[1,40]},{10:[1,41],20:42,23:58,27:$Vj,28:$Vk,56:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:53,77:$Vu,78:55,79:56},{10:[1,59]},{10:[1,60]},{10:[1,61]},{27:[1,62],45:63},o($Vv,$Vw,{45:65,27:[1,64],28:$Vx}),{27:[1,67]},{27:[1,68]},{28:[1,69]},{28:[1,70]},{28:[1,71]},{16:72,24:$V3},{28:[1,73]},{7:75,11:74,12:7,13:8,14:9,15:10,16:11,17:$V0,18:$V1,19:$V2,21:15,22:16,23:17,24:$V3,26:76,27:$Vy,39:$V7,41:$V8,42:$V9,43:$Va,44:$Vb,47:28,51:$Vc,52:$Vd,53:$Ve,54:$Vf,55:$Vg},{46:[1,78],48:[1,79]},{27:[2,49]},{27:[2,50]},{27:[2,51]},{27:[2,52]},{27:[2,53]},{1:[2,1]},o($Vh,[2,2]),o($Vh,[2,6]),o($Vi,[2,10]),o($Vi,[2,11]),o($Vi,[2,14]),o($Vi,[2,15]),o($Vi,[2,16]),{10:[1,80],56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK},{20:93,23:58,27:$Vj,28:$Vk,56:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:53,77:$Vu,78:55,79:56},{20:94,23:58,27:$Vj,28:$Vk,56:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:53,77:$Vu,78:55,79:56},o($VL,[2,70]),o($VL,[2,71]),o($VL,[2,72]),o($VL,[2,73]),o($VL,[2,74]),o($VL,[2,75]),o($VL,[2,76]),{20:95,23:58,27:$Vj,28:$Vk,56:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:53,77:$Vu,78:55,79:56},o($VL,[2,78]),{27:[1,96]},o($VL,[2,80],{48:[1,97]}),o($VL,[2,81]),o($VM,[2,83],{28:$Vx}),o($VL,[2,84]),o($Vi,[2,18]),o($Vi,[2,19]),o($Vi,[2,20]),o($VN,$VO,{28:[1,98]}),{37:$VP,46:[1,99]},o($VN,$VO,{28:[1,101]}),{37:$VP,46:[1,102]},{20:105,23:58,27:$Vj,28:$Vk,30:[2,46],49:103,50:104,56:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:53,77:$Vu,78:55,79:56},{28:[1,106]},{33:[1,107]},{20:108,23:58,27:$Vj,28:$Vk,56:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:53,77:$Vu,78:55,79:56},{20:109,23:58,27:$Vj,28:$Vk,56:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:53,77:$Vu,78:55,79:56},{20:110,23:58,27:$Vj,28:$Vk,56:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:53,77:$Vu,78:55,79:56},{41:[1,111]},{20:112,23:58,27:$Vj,28:$Vk,56:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:53,77:$Vu,78:55,79:56},{7:114,12:7,13:8,14:9,15:10,16:11,17:$V0,18:$V1,19:$V2,21:15,22:16,23:17,24:$V3,25:[1,113],26:76,27:$Vy,39:$V7,41:$V8,42:$V9,43:$Va,44:$Vb,47:28,51:$Vc,52:$Vd,53:$Ve,54:$Vf,55:$Vg},o($VQ,[2,8]),{27:$VR,45:63},o($Vv,$Vw,{45:65,27:$VR,28:$Vx}),{20:116,23:58,27:$Vj,28:$Vk,56:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:53,77:$Vu,78:55,79:56},{27:[1,117]},o($Vi,[2,17]),{20:118,23:58,27:$Vj,28:$Vk,56:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:53,77:$Vu,78:55,79:56},{20:119,23:58,27:$Vj,28:$Vk,56:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:53,77:$Vu,78:55,79:56},{20:120,23:58,27:$Vj,28:$Vk,56:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:53,77:$Vu,78:55,79:56},{20:121,23:58,27:$Vj,28:$Vk,56:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:53,77:$Vu,78:55,79:56},{20:122,23:58,27:$Vj,28:$Vk,56:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:53,77:$Vu,78:55,79:56},{20:123,23:58,27:$Vj,28:$Vk,56:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:53,77:$Vu,78:55,79:56},{20:124,23:58,27:$Vj,28:$Vk,56:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:53,77:$Vu,78:55,79:56},{20:125,23:58,27:$Vj,28:$Vk,56:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:53,77:$Vu,78:55,79:56},{20:126,23:58,27:$Vj,28:$Vk,56:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:53,77:$Vu,78:55,79:56},{20:127,23:58,27:$Vj,28:$Vk,56:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:53,77:$Vu,78:55,79:56},{20:128,23:58,27:$Vj,28:$Vk,56:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:53,77:$Vu,78:55,79:56},{20:129,23:58,27:$Vj,28:$Vk,56:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:53,77:$Vu,78:55,79:56},o($VL,[2,56]),o($VL,[2,69]),{30:[1,130],56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK},{28:[1,131]},{27:[1,132]},{26:136,27:$VS,29:133,30:$VT,35:134,38:135,51:$Vc,52:$Vd,53:$Ve,54:$Vf,55:$Vg},{20:138,23:58,27:$Vj,28:$Vk,56:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:53,77:$Vu,78:55,79:56},{27:[1,139]},{26:136,27:$VS,29:140,30:$VT,35:134,38:135,51:$Vc,52:$Vd,53:$Ve,54:$Vf,55:$Vg},{20:141,23:58,27:$Vj,28:$Vk,56:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:53,77:$Vu,78:55,79:56},{30:[1,142]},{30:[2,45],37:[1,143]},o($VU,[2,48],{56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK}),{26:136,27:$VS,29:144,30:$VT,35:134,38:135,51:$Vc,52:$Vd,53:$Ve,54:$Vf,55:$Vg},{34:[1,145]},{30:[1,146],56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK},{30:[1,147],56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK},{30:[1,148],56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK},{28:[1,149]},{30:[1,150],56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK},o([5,17,18,19,24,25,27,31,32,39,40,41,42,43,44,51,52,53,54,55],[2,21]),o($VQ,[2,7]),o($VN,$VO),{10:[2,41],56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK},o($Vv,[2,42]),o($VV,[2,57],{58:$VB,59:$VC}),o($VV,[2,58],{58:$VB,59:$VC}),o($VL,[2,59]),o($VL,[2,60]),o($VW,[2,61],{56:$Vz,57:$VA,58:$VB,59:$VC}),o($VW,[2,62],{56:$Vz,57:$VA,58:$VB,59:$VC}),o($VW,[2,63],{56:$Vz,57:$VA,58:$VB,59:$VC}),o($VW,[2,64],{56:$Vz,57:$VA,58:$VB,59:$VC}),o($VX,[2,65],{56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG}),o($VX,[2,66],{56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG}),o([10,30,37,66,67],[2,67],{56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI}),o([10,30,37,67],[2,68],{56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ}),o($VL,[2,77]),{30:[1,151]},o($VM,[2,82]),{30:[1,152]},{30:[2,26],37:$VY},o($VZ,[2,29]),{27:[1,154]},{27:[1,155]},{10:[2,39],56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK},o($VN,[2,54]),{30:[1,156]},{10:[2,40],56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK},o($VL,[2,44]),{20:157,23:58,27:$Vj,28:$Vk,56:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:53,77:$Vu,78:55,79:56},{30:[1,158]},{26:136,27:$VS,35:159,38:135,51:$Vc,52:$Vd,53:$Ve,54:$Vf,55:$Vg},{16:160,24:$V3},{10:[2,37]},{10:[2,38]},{20:161,23:58,27:$Vj,28:$Vk,56:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:53,77:$Vu,78:55,79:56},{16:162,24:$V3},o($VL,[2,79]),{16:163,24:$V3},{26:136,27:$VS,38:164,51:$Vc,52:$Vd,53:$Ve,54:$Vf,55:$Vg},o($VZ,[2,30]),o($VZ,[2,31]),{16:165,24:$V3},o($VU,[2,47],{56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK}),{16:166,24:$V3},{36:[1,167],37:$VY},o($Vi,[2,32],{40:[1,168]}),{30:[1,169],56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK},o($Vi,[2,35]),o($Vh,[2,22]),o($VZ,[2,28]),o($Vh,[2,23]),o($Vh,[2,24]),{10:[2,25]},{12:171,16:170,24:$V3,39:$V7},{10:[2,36]},o($Vi,[2,33]),o($Vi,[2,34])],
defaultActions: {29:[2,49],30:[2,50],31:[2,51],32:[2,52],33:[2,53],34:[2,1],147:[2,37],148:[2,38],167:[2,25],169:[2,36]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const {If} = require('../Compiler/Instruction/Control/If');
    const {DoWhile} = require('../Compiler/Instruction/Control/DoWhile');
    const {While} = require('../Compiler/Instruction/Control/While');
    const {InstrBody} = require('../Compiler/Instruction/Control/InstrBody');
    const {Print} = require('../Compiler/Instruction/Functions/Print');
    const {FunctionSt} = require('../Compiler/Instruction/Functions/FunctionSt');
    const {StructSt} = require('../Compiler/Instruction/Functions/StructSt');

    const {Break} = require('../Compiler/Instruction/Transfer/Break');
    const {Continue} = require('../Compiler/Instruction/Transfer/Continue');
    const {Return} = require('../Compiler/Instruction/Transfer/Return');

    const {Declaration} = require('../Compiler/Instruction/Variables/Declaration');
    const {Assignment} = require('../Compiler/Instruction/Variables/Assignment');
    const {Call} = require('../Compiler/Instruction/Variables/Call');

    const {Div} = require('../Compiler/Expression/Arithmetic/Div');
    const {Minus} = require('../Compiler/Expression/Arithmetic/Minus');
    const {Mod} = require('../Compiler/Expression/Arithmetic/Mod');
    const {Plus} = require('../Compiler/Expression/Arithmetic/Plus');
    const {Pot} = require('../Compiler/Expression/Arithmetic/Pot');
    const {Times} = require('../Compiler/Expression/Arithmetic/Times');

    const {PrimitiveL} = require('../Compiler/Expression/Literal/PrimitiveL');
    const {StringL} = require('../Compiler/Expression/Literal/StringL');
    const {NewStruct} = require('../Compiler/Expression/Literal/NewStruct');

    const {And} = require('../Compiler/Expression/Logical/And');
    const {Not} = require('../Compiler/Expression/Logical/Not');
    const {Or} = require('../Compiler/Expression/Logical/Or');

    const {Equals} = require('../Compiler/Expression/Relational/Equals');
    const {Greater} = require('../Compiler/Expression/Relational/Greater');
    const {Less} = require('../Compiler/Expression/Relational/Less');
    const {NotEquals} = require('../Compiler/Expression/Relational/NotEquals');

    const {AccessId} = require('../Compiler/Expression/Access/AccessId');
    const {AssignmentId} = require('../Compiler/Expression/Assignment/AssignmentId');
    const {AssignmentFunc} = require('../Compiler/Expression/Assignment/AssignmentFunc');

    const {Types,Type} = require('../Compiler/Utils/Type');
    const {Param} = require('../Compiler/Utils/Param');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:return 71
break;
case 4:return 69 
break;
case 5:return 58
break;
case 6:return 59
break;
case 7:return 10
break;
case 8:return 56
break;
case 9:return 57
break;
case 10:return 67
break;
case 11:return 66
break;
case 12:return 62
break;
case 13:return 63
break;
case 14:return 60
break;
case 15:return 61
break;
case 16:return 64
break;
case 17:return 65
break;
case 18:return 46
break;
case 19:return 68
break;
case 20:return 28
break;
case 21:return 30  
break;
case 22:return 34
break;
case 23:return 36
break;
case 24:return 25
break;
case 25:return 24
break;
case 26:return 37
break;
case 27:return 48
break;
case 28:return 51
break;
case 29:return 52
break;
case 30:return 53
break;
case 31:return 54
break;
case 32:return 55
break;
case 33:return 72
break;
case 34:return 73
break;
case 35:return 39
break;
case 36:return 40
break;
case 37:return 31
break;
case 38:return 41
break;
case 39:return 42
break;
case 40:return 19
break;
case 41:return 43
break;
case 42:return 44
break;
case 43:return 18
break;
case 44:return 17
break;
case 45:return 32
break;
case 46:return 33
break;
case 47:return 77
break;
case 48:return 75
break;
case 49:return 27
break;
case 50: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2).replace("\\n", "\n").replace("\\t", "\t").replace("\\r", "\r").replace("\\\\", "\\").replace("\\\"", "\""); return 70; 
break;
case 51: yy_.yytext = yy_.yytext.slice(1,-1).replace("\\n", "\n").replace("\\t", "\t").replace("\\r", "\r").replace("\\\\", "\\").replace("\\\"", "\""); return 74; 
break;
case 52:return 5
break;
case 53: 
    console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);        

break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*][*]+)*[/])/i,/^(?:(([0-9]+)\.([0-9]+)))/i,/^(?:([0-9]+))/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:;)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\})/i,/^(?:\{)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:integer\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:STRING\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:void\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:return\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:continue\b)/i,/^(?:break\b)/i,/^(?:define\b)/i,/^(?:as\b)/i,/^(?:strc\b)/i,/^(?:null\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:[\']([^\t\'\"\n]|(\\")|(\\n)|(\\')|(\\t))?[\'])/i,/^(?:"[^"]+")/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}