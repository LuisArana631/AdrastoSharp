Define BNode as [BNode left, BNode right, integer value];
Define BTree as [BNode root];

void principal() {
    BTree tree = strc BTree();        
    tree.root=addNode(1, tree.root);
    tree.root=addNode(2, tree.root);
    tree.root=addNode(3, tree.root);
    tree.root=addNode(4, tree.root);
    tree.root=addNode(5, tree.root);
    tree.root=addNode(6, tree.root);
    tree.root=addNode(7, tree.root);
    tree.root=addNode(8, tree.root);    
    tree.root=addNode(8, tree.root);    
    preOrder(tree.root);  
}



BNode addNode(integer value, BNode subRoot) {
    if(exists(value, subRoot)){
        println('R');
        return subRoot;
    }
    return add(value, subRoot);
}

BNode add(integer value, BNode subRoot) {
    if (subRoot == null) {
        subRoot = strc BNode();
        subRoot.value = value;
    } else if (subRoot.value > value) {
        subRoot.left = add(value, subRoot.left);
    } else if (value >  subRoot.value) {
        subRoot.right = add(value, subRoot.right);
    }
    return subRoot;
}

boolean exists(integer value, BNode subRoot){
    if (subRoot != null) {
        return subRoot.value == value || exists(value, subRoot.left) || exists(value, subRoot.right);
    }
    return false;
}    

void preOrder(BNode subRoot) {
    if (subRoot != null) {
        preOrder(subRoot.left);
        print(subRoot.value);
        preOrder(subRoot.right);
    }
}

principal();